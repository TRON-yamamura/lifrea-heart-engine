name: Link Weather Phrases

on:
  workflow_dispatch:

jobs:
  link-weather:
    runs-on: ubuntu-latest

    steps:
      - name: Check required secrets
        uses: actions/github-script@v6
        with:
          script: |
            const required = [
              'NOTION_TOKEN',
              'NOTION_DATABASE_ID',             // Lifrea Heart Data v2（Heart DB）
              'NOTION_WEATHER_PHRASE_DB_ID'     // Weather Phrase Map
            ];
            let ok = true;
            for (const k of required) {
              if (!process.env[k] || process.env[k].trim() === '') {
                core.warning(`Missing secret: ${k}`);
                ok = false;
              } else {
                core.info(`✅ ${k} is set (len=${process.env[k].length})`);
              }
            }
            if (!ok) {
              throw new Error('One or more required secrets are missing.');
            }

      - name: Link Heart rows to Weather Phrase Map
        uses: actions/github-script@v6
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          HEART_DB_ID: ${{ secrets.NOTION_DATABASE_ID }}
          PHRASE_DB_ID: ${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}
        with:
          script: |
            const token = process.env.NOTION_TOKEN;
            const HEART_DB_ID = process.env.HEART_DB_ID;
            const PHRASE_DB_ID = process.env.PHRASE_DB_ID;

            const base = 'https://api.notion.com/v1';
            const headers = {
              'Authorization': `Bearer ${token}`,
              'Notion-Version': '2022-06-28',
              'Content-Type': 'application/json'
            };

            async function notionQuery(dbId, body) {
              const res = await fetch(`${base}/databases/${dbId}/query`, {
                method: 'POST',
                headers,
                body: JSON.stringify(body || {})
              });
              if (!res.ok) {
                const t = await res.text();
                core.info(t);
                throw new Error(`Query failed ${res.status}`);
              }
              return res.json();
            }

            async function notionPatchPage(pageId, properties) {
              const res = await fetch(`${base}/pages/${pageId}`, {
                method: 'PATCH',
                headers,
                body: JSON.stringify({ properties })
              });
              if (!res.ok) {
                const t = await res.text();
                core.info(t);
                throw new Error(`Patch failed ${res.status}`);
              }
              return res.json();
            }

            // Heart DB から「weather_link が未設定」かつ「weather が空でない」ページを取得
            async function* iterateHeartTargets() {
              let cursor = undefined;
              do {
                const body = {
                  page_size: 100,
                  start_cursor: cursor,
                  filter: {
                    and: [
                      { property: 'weather_link', relation: { is_empty: true } },
                      { property: 'weather', select: { is_not_empty: true } }
                    ]
                  },
                  sorts: [{ property: 'time_iso', direction: 'descending' }]
                };
                const r = await notionQuery(HEART_DB_ID, body);
                for (const page of r.results) yield page;
                cursor = r.has_more ? r.next_cursor : undefined;
              } while (cursor);
            }

            // Phrase Map から、タイトル（Name）が weather 名と一致するレコードを引く
            async function findPhrasePageIdByWeatherName(name) {
              const r = await notionQuery(PHRASE_DB_ID, {
                page_size: 1,
                filter: {
                  property: 'Name',
                  title: { equals: name }
                }
              });
              return r.results?.[0]?.id || null;
            }

            // 安全に 429 を避けるためのスリープ
            const sleep = (ms) => new Promise(r => setTimeout(r, ms));

            let updated = 0;
            let skipped = 0;

            for await (const page of iterateHeartTargets()) {
              const pid = page.id;
              const props = page.properties || {};

              const weatherSelect = props?.weather?.select;
              const weatherName = weatherSelect?.name;

              if (!weatherName) {
                core.info(`⏭️  ${pid}: weather is empty, skip`);
                skipped++;
                continue;
              }

              // 例：Heart の weather が「晴天」「厚い雲」「曇り」「雨」など
              // Phrase Map 側のタイトル(Name)と一致させる
              const phraseId = await findPhrasePageIdByWeatherName(weatherName);

              if (!phraseId) {
                core.info(`⚠️  No phrase found for weather "${weatherName}"`);
                skipped++;
                continue;
              }

              // relation 更新
              await notionPatchPage(pid, {
                weather_link: {
                  relation: [{ id: phraseId }]
                }
              });

              updated++;
              core.info(`🔗 Linked: weather="${weatherName}" -> phraseId=${phraseId} (page=${pid})`);

              // 速すぎると 429 を踏むことがあるので少し待つ
              await sleep(120);
            }

            core.summary
              .addHeading('Link Weather Phrases — Result')
              .addTable([
                [{ data: 'Updated', header: true }, String(updated)],
                [{ data: 'Skipped', header: true }, String(skipped)]
              ])
              .write();

            core.info(`✅ Done. updated=${updated}, skipped=${skipped}`);
