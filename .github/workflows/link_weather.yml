name: Link Weather Phrases
on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  link:
    runs-on: ubuntu-latest
    steps:
      - name: Check required secrets
        env:
          MISS: ${{ secrets.NOTION_TOKEN }}|${{ secrets.NOTION_DATABASE_ID }}|${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}
        run: |
          if [ -z "${MISS%%*|*|*}" ]; then
            echo "Missing one or more secrets."
            echo "NOTION_TOKEN=${{ secrets.NOTION_TOKEN:+set }}"
            echo "NOTION_DATABASE_ID=${{ secrets.NOTION_DATABASE_ID:+set }}"
            echo "NOTION_WEATHER_PHRASE_DB_ID=${{ secrets.NOTION_WEATHER_PHRASE_DB_ID:+set }}"
            exit 1
          fi

      - name: Link Heart rows to Weather Phrase Map
        uses: actions/github-script@v6
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          HEART_DB: ${{ secrets.NOTION_DATABASE_ID }}
          PHRASE_DB: ${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}
        with:
          script: |
            const token = process.env.NOTION_TOKEN;
            const HEART_DB = process.env.HEART_DB;
            const PHRASE_DB = process.env.PHRASE_DB;

            const H = {
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json',
                'Notion-Version': '2022-06-28'
              }
            };

            const api = async (path, {method='POST', body} = {}) => {
              const res = await fetch(`https://api.notion.com/v1${path}`, {
                method,
                headers: H.headers,
                body: body ? JSON.stringify(body) : undefined
              });
              if (!res.ok) {
                const t = await res.text();
                throw new Error(`HTTP ${res.status} on ${path}: ${t}`);
              }
              return res.json();
            };

            // 1) Phrase Map を全部読み込み（Name をキーにした辞書）
            const phrases = {};
            let cursor = undefined;
            do {
              const q = await api(`/databases/${PHRASE_DB}/query`, {
                body: { page_size: 100, start_cursor: cursor }
              });
              for (const p of q.results) {
                const nameProp = p.properties?.Name ?? p.properties?.title ?? p.properties?.name;
                const name = nameProp?.title?.[0]?.plain_text ?? nameProp?.rich_text?.[0]?.plain_text ?? '';
                if (name) phrases[name] = p.id;
              }
              cursor = q.has_more ? q.next_cursor : undefined;
            } while (cursor);

            // 表記ゆれ吸収マップ（左＝Heart DB の weather、右＝Phrase Map の Name）
            const normMap = new Map([
              ['晴れ', '晴天'],
              ['晴天', '晴天'],
              ['快晴', '晴天'],
              ['薄曇り', '曇り'],
              ['曇り', '曇り'],
              ['曇りがち', '曇り'],
              ['雲', '曇り'],
              ['厚い雲', '厚い雲'],
              ['雨', '雨'],
              ['小雨', '小雨'],
              ['雷雨', '雷雨'],
              ['雪', '雪'],
              ['霧', '霧'],
              ['にわか雨', '小雨'],
            ]);

            const normalize = (w) => normMap.get(w) ?? w;

            // 2) Heart DB の最近の行を取得（直近 100 件、未リンク優先）
            const heartRows = await api(`/databases/${HEART_DB}/query`, {
              body: {
                page_size: 100,
                sorts: [{ property: 'time_iso', direction: 'descending' }]
              }
            });

            let linked = 0, skipped = 0;
            for (const page of heartRows.results) {
              const wp = page.properties?.weather;
              const rel = page.properties?.weather_link;

              // 既に relation が埋まっていたらスキップ
              const already = Array.isArray(rel?.relation) && rel.relation.length > 0;
              if (already) { skipped++; continue; }

              const weather = wp?.select?.name;
              if (!weather) { skipped++; continue; }

              const key = normalize(weather);
              const phraseId = phrases[key];
              if (!phraseId) { skipped++; continue; }

              // 3) relation weather_link を更新
              await api(`/pages/${page.id}`, {
                method: 'PATCH',
                body: {
                  properties: {
                    weather_link: { relation: [{ id: phraseId }] }
                  }
                }
              });
              linked++;
            }

            core.info(`Linked: ${linked}, Skipped: ${skipped}`);
