name: Link Heart to Weather Phrase

on:
  workflow_dispatch:

jobs:
  link:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check required secrets
        run: |
          miss=""
          [ -z "${{ secrets.NOTION_TOKEN }}" ] && echo "Missing: NOTION_TOKEN" && miss=1
          [ -z "${{ secrets.NOTION_DATABASE_ID }}" ] && echo "Missing: NOTION_DATABASE_ID" && miss=1
          [ -z "${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}" ] && echo "Missing: NOTION_WEATHER_PHRASE_DB_ID" && miss=1
          [ -n "$miss" ] && exit 1 || true

      - name: Link Heart rows to Weather Phrase (via REST)
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}               # Lifrea Heart Data v2
          NOTION_WEATHER_PHRASE_DB_ID: ${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }} # Weather Phrase Map
        run: |
          node - <<'NODE'
          // ===== 設定（Notion 側のプロパティ名。画面の見出しと一致させる）=====
          const HEART_DB_ID  = process.env.NOTION_DATABASE_ID;                // Lifrea Heart Data v2
          const PHRASE_DB_ID = process.env.NOTION_WEATHER_PHRASE_DB_ID;       // Weather Phrase Map
          const WEATHER_PROP = 'weather';          // Heart: 天気(Select)
          const RELATION_PROP= 'weather_link';     // Heart: Relation → Phrase DB
          const PHRASE_TITLE_PROP = 'title';       // Phrase: タイトル(Title)
          const KEYS_PROP    = 'keys';             // Phrase: 代表語（テキスト or マルチセレクト）
          // ===============================================================

          const TOKEN = process.env.NOTION_TOKEN;
          const BASE = 'https://api.notion.com/v1';
          const HDRS = {
            'Authorization': `Bearer ${TOKEN}`,
            'Content-Type': 'application/json',
            'Notion-Version': '2022-06-28'
          };

          // --- REST helpers ---
          async function notionQueryDB(dbId, body) {
            const res = await fetch(`${BASE}/databases/${dbId}/query`, {
              method: 'POST', headers: HDRS, body: JSON.stringify(body || {})
            });
            if (!res.ok) throw new Error(`QueryDB ${dbId} ${res.status}: ${await res.text()}`);
            return res.json();
          }
          async function notionUpdatePage(pageId, properties) {
            const res = await fetch(`${BASE}/pages/${pageId}`, {
              method: 'PATCH', headers: HDRS, body: JSON.stringify({ properties })
            });
            if (!res.ok) throw new Error(`Update ${pageId} ${res.status}: ${await res.text()}`);
            return res.json();
          }
          async function notionCreatePage(dbId, properties) {
            const res = await fetch(`${BASE}/pages`, {
              method: 'POST', headers: HDRS,
              body: JSON.stringify({ parent: { database_id: dbId }, properties })
            });
            if (!res.ok) throw new Error(`Create ${dbId} ${res.status}: ${await res.text()}`);
            return res.json();
          }

          // Heart 側で weather_link が空 & weather が入っている行を取得
          async function fetchHeartTargets() {
            const pages = [];
            let cursor = undefined;
            do {
              const body = {
                start_cursor: cursor,
                page_size: 100,
                filter: {
                  and: [
                    { property: RELATION_PROP, relation: { is_empty: true } },
                    { property: WEATHER_PROP, select: { is_not_empty: true } }
                  ]
                },
                sorts: [{ timestamp: "last_edited_time", direction: "descending" }]
              };
              const j = await notionQueryDB(HEART_DB_ID, body);
              pages.push(...j.results);
              cursor = j.has_more ? j.next_cursor : undefined;
            } while (cursor);
            return pages;
          }

          // Phrase DB で候補を探す（Title 完全一致 → keys 含有（テキスト/マルチ））
          async function findPhrasePage(weatherValue) {
            // 1) Title equals
            try {
              const j = await notionQueryDB(PHRASE_DB_ID, {
                filter: { property: PHRASE_TITLE_PROP, title: { equals: weatherValue } },
                page_size: 1
              });
              if (j.results.length) return j.results[0];
            } catch (_) {}

            // 2) keys rich_text contains
            try {
              const j = await notionQueryDB(PHRASE_DB_ID, {
                filter: { property: KEYS_PROP, rich_text: { contains: weatherValue } },
                page_size: 1
              });
              if (j.results.length) return j.results[0];
            } catch (_) {}

            // 3) keys multi_select contains
            try {
              const j = await notionQueryDB(PHRASE_DB_ID, {
                filter: { property: KEYS_PROP, multi_select: { contains: weatherValue } },
                page_size: 1
              });
              if (j.results.length) return j.results[0];
            } catch (_) {}

            // 4) なければ Title=天気名 で新規作成（暫定）
            const created = await notionCreatePage(PHRASE_DB_ID, {
              [PHRASE_TITLE_PROP]: { title: [{ type: "text", text: { content: weatherValue } }] },
              // keys をテキストで保持（UI で後から整備可）
              [KEYS_PROP]: { rich_text: [{ type: "text", text: { content: weatherValue } }] }
            });
            return created;
          }

          (async () => {
            const targets = await fetchHeartTargets();
            console.log(`Heart rows to link: ${targets.length}`);

            for (const pg of targets) {
              const w = pg.properties?.[WEATHER_PROP]?.select?.name || '';
              if (!w) continue;

              const phrase = await findPhrasePage(w);
              if (!phrase?.id) {
                console.log(`No phrase found/created for "${w}". skip.`);
                continue;
              }

              await notionUpdatePage(pg.id, {
                [RELATION_PROP]: { relation: [{ id: phrase.id }] }
              });
              console.log(`Linked: "${w}" -> phrase(${phrase.id}) for heart(${pg.id})`);
            }
          })().catch(e => {
            console.error(e);
            process.exit(1);
          });
          NODE

      - name: Post Set up Node.js
        if: always()
        run: echo "done"
