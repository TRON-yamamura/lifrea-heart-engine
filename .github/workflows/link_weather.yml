name: Link Weather Phrases

on:
  workflow_dispatch:

jobs:
  link:
    runs-on: ubuntu-latest
    env:
      NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
      NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
      NOTION_WEATHER_PHRASE_DB_ID: ${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}

    steps:
      - name: Check required secrets
        run: |
          miss=""
          [ -z "$NOTION_TOKEN" ] && echo "Missing: NOTION_TOKEN" && miss=1
          [ -z "$NOTION_DATABASE_ID" ] && echo "Missing: NOTION_DATABASE_ID" && miss=1
          [ -z "$NOTION_WEATHER_PHRASE_DB_ID" ] && echo "Missing: NOTION_WEATHER_PHRASE_DB_ID" && miss=1
          [ -n "$miss" ] && exit 1 || echo "All secrets present."

      - name: Link Heart rows to Weather Phrase Map
        uses: actions/github-script@v6
        with:
          script: |
            // --- helpers ---
            const fetch = global.fetch ?? (await import('node-fetch')).default;

            const NOTION_TOKEN = process.env.NOTION_TOKEN;
            const HEART_DB = process.env.NOTION_DATABASE_ID;
            const PHRASE_DB = process.env.NOTION_WEATHER_PHRASE_DB_ID;

            const NOTION_API = "https://api.notion.com/v1";
            const headers = {
              "Authorization": `Bearer ${NOTION_TOKEN}`,
              "Notion-Version": "2022-06-28",
              "Content-Type": "application/json",
            };

            async function query(dbId, filter) {
              const res = await fetch(`${NOTION_API}/databases/${dbId}/query`, {
                method: "POST",
                headers,
                body: JSON.stringify(filter ?? {})
              });
              const body = await res.json();
              if (!res.ok) {
                core.error(`Query error: ${res.status} ${JSON.stringify(body)}`);
                throw new Error(`Notion query failed: ${res.status}`);
              }
              return body.results ?? [];
            }

            async function updatePage(pageId, props) {
              const res = await fetch(`${NOTION_API}/pages/${pageId}`, {
                method: "PATCH",
                headers,
                body: JSON.stringify({ properties: props })
              });
              const body = await res.json();
              if (!res.ok) {
                core.error(`Update error: ${res.status} ${JSON.stringify(body)}`);
                throw new Error(`Notion update failed: ${res.status}`);
              }
              return body;
            }

            // 1) Weather Phrase Map を全部取得（キー＝タイトル）
            const phrases = await query(PHRASE_DB);
            const titleText = (prop) =>
              (prop?.title?.[0]?.plain_text ?? prop?.rich_text?.[0]?.plain_text ?? "").trim();

            const phraseByKey = new Map();
            for (const p of phrases) {
              const key = titleText(p.properties?.Name ?? p.properties?.title);
              if (key) phraseByKey.set(key, p);
            }

            // 2) Heart DB の直近50件を取得（必要なら増やせます）
            const hearts = await query(HEART_DB, { page_size: 50 });

            // 3) weather→一致するフレーズページを relation 設定
            for (const row of hearts) {
              const props = row.properties || {};
              const weather = props.weather?.select?.name || props.weather?.select?.name_jp || "";
              if (!weather) continue;

              const match = phraseByKey.get(weather);
              if (!match) continue;

              const already = (props.weather_link?.relation ?? [])
                .some(r => r.id === match.id);
              if (already) continue;

              await updatePage(row.id, {
                weather_link: {
                  relation: [{ id: match.id }]
                }
              });
            }

            core.info("Linking finished.");
