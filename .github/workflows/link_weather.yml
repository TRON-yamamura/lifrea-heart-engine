name: Link Heart to Weather Phrase

on:
  workflow_dispatch:

jobs:
  link:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Notion SDK
        run: npm i @notionhq/client

      - name: Check required secrets
        run: |
          miss=""
          [ -z "${{ secrets.NOTION_TOKEN }}" ] && echo "Missing: NOTION_TOKEN" && miss=1
          [ -z "${{ secrets.NOTION_DATABASE_ID }}" ] && echo "Missing: NOTION_DATABASE_ID" && miss=1
          [ -z "${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }}" ] && echo "Missing: NOTION_WEATHER_PHRASE_DB_ID" && miss=1
          [ -n "$miss" ] && exit 1 || true

      - name: Link Heart rows to Weather Phrase
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}                       # Notion 内部統合のトークン
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}           # Lifrea Heart Data v2 の DB ID
          NOTION_WEATHER_PHRASE_DB_ID: ${{ secrets.NOTION_WEATHER_PHRASE_DB_ID }} # Weather Phrase Map の DB ID
        run: |
          node - <<'NODE'
          // ====== 設定（プロパティ名は Notion 側と一致させてください）======
          const HEART_DB_ID = process.env.NOTION_DATABASE_ID;              // Lifrea Heart Data v2
          const PHRASE_DB_ID = process.env.NOTION_WEATHER_PHRASE_DB_ID;    // Weather Phrase Map
          const WEATHER_PROP = 'weather';          // Heart 側: 天気(Select)
          const RELATION_PROP = 'weather_link';    // Heart 側: Phrase DB への Relation
          const PHRASE_TITLE_PROP = 'title';       // Phrase 側: タイトル(Title)
          const KEYS_PROP = 'keys';                // Phrase 側: キー(テキスト or マルチセレクト どちらでもOK)
          // =============================================================

          const { Client } = require("@notionhq/client");
          const notion = new Client({ auth: process.env.NOTION_TOKEN });

          async function queryHeartNeedingLink() {
            const pages = [];
            let cursor = undefined;
            do {
              const res = await notion.databases.query({
                database_id: HEART_DB_ID,
                start_cursor: cursor,
                page_size: 100,
                filter: {
                  and: [
                    { property: RELATION_PROP, relation: { is_empty: true } },
                    { property: WEATHER_PROP, select: { is_not_empty: true } }
                  ]
                },
                sorts: [{ timestamp: "last_edited_time", direction: "descending" }]
              });
              pages.push(...res.results);
              cursor = res.has_more ? res.next_cursor : undefined;
            } while (cursor);
            return pages;
          }

          async function findPhrasePage(weatherValue) {
            // ① Title 完全一致
            try {
              const res = await notion.databases.query({
                database_id: PHRASE_DB_ID,
                filter: { property: PHRASE_TITLE_PROP, title: { equals: weatherValue } },
                page_size: 1
              });
              if (res.results.length) return res.results[0];
            } catch (_) {}

            // ② keys（テキスト）に包含
            try {
              const res = await notion.databases.query({
                database_id: PHRASE_DB_ID,
                filter: { property: KEYS_PROP, rich_text: { contains: weatherValue } },
                page_size: 1
              });
              if (res.results.length) return res.results[0];
            } catch (_) {}

            // ③ keys（マルチセレクト）に包含
            try {
              const res = await notion.databases.query({
                database_id: PHRASE_DB_ID,
                filter: { property: KEYS_PROP, multi_select: { contains: weatherValue } },
                page_size: 1
              });
              if (res.results.length) return res.results[0];
            } catch (_) {}

            // ④ 見つからなければ Title=天気名 で新規作成（暫定運用）
            const created = await notion.pages.create({
              parent: { database_id: PHRASE_DB_ID },
              properties: {
                [PHRASE_TITLE_PROP]: { title: [{ type: "text", text: { content: weatherValue } }] },
                // keys はテキストで入れておく（後でUIから整備してもOK）
                [KEYS_PROP]: { rich_text: [{ type: "text", text: { content: weatherValue } }] }
              }
            });
            return created;
          }

          async function linkHeartToPhrase(heartPageId, phrasePageId) {
            await notion.pages.update({
              page_id: heartPageId,
              properties: {
                [RELATION_PROP]: { relation: [{ id: phrasePageId }] }
              }
            });
          }

          (async () => {
            const targets = await queryHeartNeedingLink();
            console.log(`Heart rows to link: ${targets.length}`);

            for (const page of targets) {
              const weather = page.properties?.[WEATHER_PROP]?.select?.name || '';
              if (!weather) continue;

              const phrase = await findPhrasePage(weather);
              if (!phrase?.id) {
                console.log(`No phrase found/created for "${weather}". skip.`);
                continue;
              }

              await linkHeartToPhrase(page.id, phrase.id);
              console.log(`Linked: "${weather}" -> phrase(${phrase.id}) for heart(${page.id})`);
            }
          })().catch(e => {
            console.error(e);
            process.exit(1);
          });
          NODE
